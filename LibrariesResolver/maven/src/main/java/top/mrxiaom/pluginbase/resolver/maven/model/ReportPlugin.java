// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 2.1.2,
// any modifications will be overwritten.
// ==============================================================

package top.mrxiaom.pluginbase.resolver.maven.model;

/**
 * 
 *         
 *         The <code>&lt;plugin&gt;</code> element in
 * <code>&lt;reporting&gt;&lt;plugins&gt;</code> contains
 * informations required for a report plugin.
 *         
 *       
 * 
 * @version $Revision$ $Date$
 */
public class ReportPlugin
    extends ConfigurationContainer
    implements java.io.Serializable, java.lang.Cloneable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * The group ID of the reporting plugin in the repository.
     */
    private String groupId = "org.apache.maven.plugins";

    /**
     * The artifact ID of the reporting plugin in the repository.
     */
    private String artifactId;

    /**
     * 
     *             
     *             The version of the reporting plugin to be used.
     * Starting with Maven 3, if no version is defined explicitely,
     *             version is searched in
     * <code>build/plugins</code> then in
     * <code>build/pluginManagement</code>.
     *             
     *           
     */
    private String version;

    /**
     * Field reportSets.
     */
    private java.util.List<ReportSet> reportSets;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method clone.
     * 
     * @return ReportPlugin
     */
    public ReportPlugin clone()
    {
        try
        {
            ReportPlugin copy = (ReportPlugin) super.clone();

            if ( this.reportSets != null )
            {
                copy.reportSets = new java.util.ArrayList<>();
                for ( ReportSet item : this.reportSets )
                {
                    copy.reportSets.add( item.clone() );
                }
            }

            return copy;
        }
        catch ( java.lang.Exception ex )
        {
            throw new UnsupportedOperationException( getClass().getName()
                + " does not support clone()", ex);
        }
    } //-- ReportPlugin clone()

    /**
     * Get the artifact ID of the reporting plugin in the
     * repository.
     * 
     * @return String
     */
    public String getArtifactId()
    {
        return this.artifactId;
    } //-- String getArtifactId()

    /**
     * Get the group ID of the reporting plugin in the repository.
     * 
     * @return String
     */
    public String getGroupId()
    {
        return this.groupId;
    } //-- String getGroupId()

    /**
     * Method getReportSets.
     * 
     * @return List
     */
    public java.util.List<ReportSet> getReportSets()
    {
        if ( this.reportSets == null )
        {
            this.reportSets = new java.util.ArrayList<>();
        }

        return this.reportSets;
    } //-- java.util.List<ReportSet> getReportSets()

    /**
     * Get the version of the reporting plugin to be used. Starting
     * with Maven 3, if no version is defined explicitely,
     *             version is searched in
     * <code>build/plugins</code> then in
     * <code>build/pluginManagement</code>.
     * 
     * @return String
     */
    public String getVersion()
    {
        return this.version;
    } //-- String getVersion()

    /**
     * Set the artifact ID of the reporting plugin in the
     * repository.
     * 
     * @param artifactId a artifactId object.
     */
    public void setArtifactId( String artifactId )
    {
        this.artifactId = artifactId;
    } //-- void setArtifactId( String )

    /**
     * Set the group ID of the reporting plugin in the repository.
     * 
     * @param groupId a groupId object.
     */
    public void setGroupId( String groupId )
    {
        this.groupId = groupId;
    } //-- void setGroupId( String )

    /**
     * Set multiple specifications of a set of reports, each having
     * (possibly) different
     *             configuration. This is the reporting parallel to
     * an <code>execution</code> in the build.
     * 
     * @param reportSets a reportSets object.
     */
    public void setReportSets( java.util.List<ReportSet> reportSets )
    {
        this.reportSets = reportSets;
    } //-- void setReportSets( java.util.List )

    /**
     * Set the version of the reporting plugin to be used. Starting
     * with Maven 3, if no version is defined explicitely,
     *             version is searched in
     * <code>build/plugins</code> then in
     * <code>build/pluginManagement</code>.
     * 
     * @param version a version object.
     */
    public void setVersion( String version )
    {
        this.version = version;
    } //-- void setVersion( String )

    /**
     * @return the key of the report plugin, ie <code>groupId:artifactId</code>
     */
    public String getKey()
    {
        return constructKey( groupId, artifactId );
    }

    /**
     * @param groupId The group ID of the plugin in the repository
     * @param artifactId The artifact ID of the reporting plugin in the repository
     * @return the key of the report plugin, ie <code>groupId:artifactId</code>
     */
    public static String constructKey( String groupId, String artifactId )
    {
        return groupId + ":" + artifactId;
    }
}
